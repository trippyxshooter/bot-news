import yaml
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import structlog
from datetime import datetime, timedelta
from app.config import settings
from app.fetchers.rss import RSSFetcher
from app.fetchers.api import APIFetcher
from app.fetchers.github import GitHubTrendingFetcher
from app.models import Source
from app.db import db
from app.ranker import Ranker
from app.summarizer import Summarizer

logger = structlog.get_logger()

FETCHER_MAP = {
    'rss': RSSFetcher,
    'api': APIFetcher,
    'scrap': GitHubTrendingFetcher,
}

class NewsScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.ranker = Ranker()
        self.summarizer = Summarizer()
        self.sources = self._load_sources()
        self.delivery_stats = {"total": 0, "success": 0}
        self.duplicate_stats = {"total": 0, "duplicates": 0}
    
    def _load_sources(self) -> list[Source]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        with open(settings.SOURCES_FILE) as f:
            data = yaml.safe_load(f)
            return [Source(**source) for source in data['sources']]
    
    def _is_breaking_news_timely(self, item) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç"""
        if not item.published:
            return False
        time_diff = datetime.now() - item.published
        return time_diff <= timedelta(minutes=15)
    
    def _is_duplicate(self, item) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã"""
        recent_news = db.get_recent_news(minutes=60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        for news in recent_news:
            if self._calculate_similarity(item.title, news.title) > 0.8:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 80%
                self.duplicate_stats["duplicates"] += 1
                return True
        return False
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, cosine similarity)
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        return len(intersection) / len(union) if union else 0
    
    async def process_source(self, source: Source):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫"""
        print(f"process_source called for {source.id}")
        try:
            fetcher_cls = FETCHER_MAP.get(source.type)
            if not fetcher_cls:
                logger.error(f"Unknown fetcher type: {source.type}", source_id=source.id)
                return
            fetcher = fetcher_cls(source)
            items = await fetcher.fetch()
            print(f"Fetched {len(items)} items from {source.id}")  # DEBUG
            if not items:
                return
            processed_items = await self.summarizer.process_batch(items)
            for item in processed_items:
                if self._is_duplicate(item):
                    logger.info("duplicate_skipped", title=item.title)
                    continue
                    
                score = self.ranker.calculate_score(item)
                item.score = score
                item.impact = self.ranker.calculate_impact(score, item.impact)
                
                if db.add_news_item(item):
                    if item.impact >= 2:
                        print(f"TRY SEND: {item.title} | {item.source_id}")
                        print(f"Send breaking news: {item.title}")  # DEBUG
                        try:
                            from app.bot import send_breaking_news
                            await send_breaking_news(item)
                            self.delivery_stats["success"] += 1
                            logger.info("breaking_news_sent", title=item.title, impact=item.impact)
                        except Exception as e:
                            logger.error("breaking_news_delivery_failed", error=str(e), title=item.title)
                        self.delivery_stats["total"] += 1
            await fetcher.close()
        except Exception as e:
            logger.error("error_processing_source", error=str(e), source_id=source.id)
    
    async def send_daily_digest(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"""
        try:
            news = db.get_unsent_news()
            if not news:
                logger.info("no_news_for_digest")
                return
            text = "<b>üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –¥–µ–Ω—å</b>\n\n"
            for item in news:
                text += (
                    f"<b>‚Ä¢ {item.title}</b>\n"
                    f"<i>{item.summary}</i>\n"
                    f"<b>–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ:</b> {item.why_matters}\n"
                    f"<b>–î–∂–µ—Ä–µ–ª–æ:</b> <code>{item.source_id}</code> | <b>Impact:</b> {item.impact}\n"
                    f"<a href='{item.url}'>–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é</a>\n\n"
                )
            try:
                from app.bot import send_breaking_news
                await send_breaking_news(news[0])  # TODO: –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É
                self.delivery_stats["success"] += 1
                logger.info("digest_sent", items_count=len(news))
            except Exception as e:
                logger.error("digest_delivery_failed", error=str(e))
            self.delivery_stats["total"] += 1
            
            for item in news:
                db.mark_as_sent(item.url)
                
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            delivery_rate = (self.delivery_stats["success"] / self.delivery_stats["total"] * 100) if self.delivery_stats["total"] > 0 else 0
            duplicate_rate = (self.duplicate_stats["duplicates"] / self.duplicate_stats["total"] * 100) if self.duplicate_stats["total"] > 0 else 0
            logger.info("delivery_stats", 
                       delivery_rate=f"{delivery_rate:.2f}%",
                       duplicate_rate=f"{duplicate_rate:.2f}%")
        except Exception as e:
            logger.error("error_sending_digest", error=str(e))

    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        for source in self.sources:
            if source.active:
                self.scheduler.add_job(
                    self.process_source,
                    'interval',
                    minutes=source.interval,
                    args=[source],
                    id=f"source_{source.id}"
                )
        self.scheduler.add_job(
            self.send_daily_digest,
            CronTrigger(hour=12, minute=30, timezone='Europe/Kiev'),
            id="daily_digest"
        )
        print("Scheduler jobs:", self.scheduler.get_jobs())  # DEBUG
        self.scheduler.start()
        logger.info("scheduler_started") 