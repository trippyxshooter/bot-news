from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import structlog
from app.config import Settings, settings
from app.db import db
from app.models import NewsItem
from app.scheduler import NewsScheduler

logger = structlog.get_logger()

class NewsBot:
    def __init__(self, settings: Settings):
        self.settings = settings
        self.bot = Bot(token=settings.TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()

    def setup_handlers(self):
        """Setup message handlers"""
        self.dp.message.register(self.handle_admin_command, Command("stats"))
        self.dp.message.register(self.handle_admin_command, Command("digest"))
        self.dp.message.register(self.handle_admin_command, Command("toggle"))

    async def handle_admin_command(self, message: Message) -> None:
        """Handle admin commands."""
        if not message.from_user:
            return
            
        user_id = str(message.from_user.id)
        if user_id not in self.settings.get_admin_ids():
            await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return

        command = message.text.split()[0] if message.text else ""
        if command == "/stats":
            await self.show_stats(message)
        elif command == "/digest":
            await self.create_digest(message)
        elif command.startswith("/toggle"):
            await self.toggle_feature(message)

    async def show_stats(self, message: Message) -> None:
        """Show statistics for 24 hours / week"""
        day_ago = datetime.now() - timedelta(days=1)
        day_stats = db.get_stats_since(day_ago)
        
        week_ago = datetime.now() - timedelta(days=7)
        week_stats = db.get_stats_since(week_ago)
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        text += "–ó–∞ 24 –≥–æ–¥–∏–Ω–∏:\n"
        text += f"‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –Ω–æ–≤–∏–Ω: {day_stats['total']}\n"
        text += f"‚Ä¢ Breaking news: {day_stats['breaking']}\n"
        text += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π impact: {day_stats['avg_impact']:.1f}\n\n"
        
        text += "–ó–∞ —Ç–∏–∂–¥–µ–Ω—å:\n"
        text += f"‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –Ω–æ–≤–∏–Ω: {week_stats['total']}\n"
        text += f"‚Ä¢ Breaking news: {week_stats['breaking']}\n"
        text += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π impact: {week_stats['avg_impact']:.1f}\n"
        
        await message.reply(text)

    async def create_digest(self, message: Message) -> None:
        """Send digest now"""
        try:
            scheduler = NewsScheduler()
            await scheduler.send_daily_digest()
            await message.reply("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error("error_sending_digest", error=str(e))
            await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–∞–π–¥–∂–µ—Å—Ç—É")

    async def toggle_feature(self, message: Message) -> None:
        """Toggle source on/off"""
        try:
            source_id = message.text.split()[1]
            success = db.toggle_source(source_id)
            if success:
                await message.reply(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ {source_id} {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if success else '–≤–∏–º–∫–Ω–µ–Ω–æ'}")
            else:
                await message.reply("‚ùå –î–∂–µ—Ä–µ–ª–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except IndexError:
            await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –¥–∂–µ—Ä–µ–ª–∞: /toggle <source_id>")

    async def start(self):
        """Start the bot"""
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error("error_starting_bot", error=str(e))
            raise

# For backward compatibility
bot = Bot(token=settings.TELEGRAM_TOKEN)
dp = Dispatcher()

TG_ADMIN_ID = int(getattr(settings, 'TG_ADMIN_ID', 0))

# –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ (ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Telegram)
ADMIN_IDS = [int(id) for id in settings.get_admin_ids()]

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def send_breaking_news(item):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ breaking news –≤ –∫–∞–Ω–∞–ª"""
    try:
        text = f"Breaking News\n\n"
        text += f"{item.title}\n\n"
        text += f"{item.summary}\n\n"
        text += f"{item.url}"
        
        await bot.send_message(
            chat_id=settings.TELEGRAM_CHANNEL_ID,
            text=text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        logger.info("breaking_news_sent", title=item.title, impact=item.impact)
    except Exception as e:
        logger.error("error_sending_breaking_news", error=str(e), title=item.title)

async def start_bot():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error("error_starting_bot", error=str(e))
        raise 

async def handle_admin_command(self, message: Message) -> None:
    """Handle admin commands."""
    if not message.from_user:
        return
        
    user_id = str(message.from_user.id)
    if user_id not in self.settings.get_admin_ids():
        await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    command = message.text.split()[0] if message.text else ""
    if command == "/stats":
        await self.show_stats(message)
    elif command == "/digest":
        await self.create_digest(message)
    elif command.startswith("/toggle"):
        await self.toggle_feature(message) 